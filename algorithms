*****************************************************************************
有向グラフの閉路検出
d[i][t]: edge i->t
m[]	: 一時的なフラグ
f[] :　永久的なフラグ
	static boolean rep(int x, int d[][], boolean m[], boolean f[]) {
		for(int i=0; i<26; i++){
			if( d[x][i]>0 && !f[i]) {
				if( m[i] )return false;
				else {
					m[x] = true; 
					boolean r = rep(i ,d, m ,f); 
					if( !r )return r;
					m[x] = false;
				}
			}
		}
		f[x] = true;
		return true;
	}
使用法
boolean f[] = new boolean [26];
		for (int i = 0; i < d.length; i++) {
			if(f[i])continue;
			if( !rep(i, d, new boolean[26],f ) )return "Impossible";
}
**************************************************************************
ダイクストラ
double d[] = new double[n];
fill(d, 1L<<40);
d[start_id] = 0;
int from = sc.nextInt() - 1, to = sc.nextInt() - 1;
                
PriorityQueue<P> que = new PriorityQueue<P>();
que.add(new P(start_id, d[start_id]));

while(!que.isEmpty()) {
    P p = que.poll();
    int cr = p.v;
    if(d[cr] < p.d) continue;
    for( int t=0; t<n; t++ ){
        if(edge[cr][t] < 0) continue;
        if( d[t] > d[cr] + edge[cr][t]) {
            d[t] = d[cr] + edge[cr][t];
            que.add(new P(t, d[t]));
        }
    }
}              
**************************************************************************
// Segment Tree
class segtree {
     int seg1[],seg2[];
     /*
     N:問題の最大サイズ
     [a,b)にcを足す、
    sg.add(a, b+1, c, 0, 0, N);
     区間和[a,b)、
    sg.sum(a, b+1, 0, 0, N);
     */
     segtree(){ 
                //   n<=100000 0-based each [a,b)
         seg1=new int[(1<<18)-1];
         seg2=new int[(1<<18)-1];
     }
    void add(int a,int b,int x,int k,int l,int r){
        //System.out.println(a+" "+b+" "+ l+" "+r+" "+k);
        if( a<=l && r<=b ){ seg1[k]+=x; }
        else if( l<b && a<r  ){
            seg2[k]+= x*( min(r,b)-max(a,l) );
         add(a,b,x,2*k+1,l,(l+r)/2);
         add(a,b,x,2*k+2,(l+r)/2,r);    
        }
            
    }
    int sum(int a,int b,int k,int l,int r){
        if( b<=l || r<=a )return 0;
        if( a<=l && r<=b ){ return seg1[k]*(r-l)+seg2[k]; }
        else{
        int res=0;
         res+= seg1[k]*( min(r,b)-max(a,l) );
         res+=sum(a,b,2*k+1,l,(l+r)/2);
         res+=sum(a,b,2*k+2,(l+r)/2,r); 
         return res;
        }
    }
 }
**************************************************************************
// BIT
class bit {
    int b[],n;
    bit(int n){
        this.n = n;
        b = new int[n+1];
    }
    int sum(int i){
        int s = 0;
        while(i > 0){
            s += b[i];
            i -= i&-i;
        }
        return s;   
    }
    void add(int i, int x){
        while(i <= n){
            b[i] += x;
            i += i&-i;
        }
    }
}
*********************************simple tools************************************
ソート済み整数配列を圧縮
static int[] unique_array(int d[]) {
    //d:sorted
    int id = 1;
    for( int i=1; i<d.length; i++ ){
        if(d[i]!=d[id-1]){
            d[id++] = d[i];
        }
    }
    return copyOf(d, id);
}
*********************************tree input**********************************
static int[][][]   tree_in(Reader sc,int n) throws Exception, IOException{
    int r[][][]=new int[n][][]; //heavy edge
    //int r[][];  // edge 1

    int pr[]=new int[n-1];
    int ch[]=new int[n-1];
    int ds[]=new int[n-1]; //distance
    int dg[]=new int[n];   //degree

    for (int i=0; i<n-1; i++) {
        int a=sc.nextInt(),b=sc.nextInt(),d=sc.nextInt();
        a--;b--;
        pr[i]=a; ch[i]=b; ds[i]=d;
        dg[a]++;dg[b]++;
    }
    for (int i=0; i<n; i++) r[i]=new int[dg[i]][2]
    for (int i=0; i<n-1; i++) {
       int a=pr[i],b=ch[i],d=ds[i];
       r[ a ][dg[a]-1][0]=b;
       r[ a ][--dg[a]][1]=d;
       r[ b ][dg[b]-1][0]=a;
       r[ b ][--dg[b]][1]=d;
    }
    return r;
 }
**************************************************************************
exGCD
public static long[] exGCD(long a, long b)
{
    if(a == 0 || b == 0)return null;
    int as = Long.signum(a);
    int bs = Long.signum(b);
    a = Math.abs(a); b = Math.abs(b);
    long p = 1, q = 0, r = 0, s = 1;
    while(b > 0){
        long c = a / b;
        long d;
        d = a; a = b; b = d % b;
        d = p; p = q; q = d - c * q;
        d = r; r = s; s = d - c * s;
    }// can be minus! 
    return new long[]{a, p * as, r * bs};
}


  class QuickUnionWeighted {
     public int[] id;
     private int[] sz;
     public QuickUnionWeighted(int N)
     {
         id = new int[N];
         sz = new int[N];
         for (int i = 0; i < N; i++) {
             id[i] = i;
             sz[i] = 1;
         }
     }
     
     private int root(int p) {
         while (id[p] != p) p = id[p];
         return p;
     }
     
     public boolean connected(int id1, int id2) {
         return root(id1) == root(id2);
     }
     
     public void union(int p, int q) {
         int i = root(p);
         int j = root(q);
         if( i==j )return;
         if (sz[i] < sz[j]) { id[i] = j; sz[j] += sz[i];   }
         else               { id[j] = i; sz[i] += sz[j];   }  
     }
     public int sz(int x){
         return sz[ root(x) ];// weight
     }
  }
**************************************************************************
LCA
    
static ArrayList<Integer> l[];
static int parent[][],depth[],node,max_log;

static void tree_in(Reader sc) throws IOException{
     
     for (int i = 0; i < node-1 ; i++) {
          int x=sc.nextInt()-1,y=sc.nextInt()-1;
          if( l[x]==null )l[x]=new ArrayList<Integer>();
          if( l[y]==null )l[y]=new ArrayList<Integer>();
          l[x].add(y);l[y].add(x);
    }
     
 }

 static void dfs(int v,int p, int d){
     
     parent[0][v]=p;
     depth[v]=d;
     
     for (int i = 0; i < l[v].size() ; i++) {
        
         int e=l[v].get(i);
         if( p!=e )dfs(e,v,d+1);
         
    }
     
 }
  
 static void init_lca(){
     
     dfs(0,-1,0); //root=0  
     
      for (int k = 0; k+1 < max_log ; k++) {
        for (int v = 0; v < node ; v++) {
            if(parent[k][v]<0)parent[k+1][v]=-1;
            else parent[k+1][v]=parent[k][parent[k][v]];    
        }
    }
      
 }
 
 static int lca(int u,int v){
     
     if(depth[u]>depth[v]){   
         //swap
         int x=u;
         u=v;v=x; 
     }
    // going to same depth   
     for (int k = 0; k < max_log; k++) {
        if( 0<((depth[v]-depth[u])>>k & 1) )v=parent[k][v];
    }
     
     if(v==u)return u;
     
     for (int k = max_log-1; 0 <= k; k--) {
        if(parent[k][u]!=parent[k][v]){
            u=parent[k][u];
            v=parent[k][v];
        }
    }
     return parent[0][u];
 }

**************************************************************************
二項係数 mod　nCm

long fr[]=new long[sz];
long inv[]=new long[sz];

fr[0]=inv[0] = 1;
fr[1]=inv[1] = 1;
int mod=1000000007;

for (int i = 2; i <sz; ++i){
    inv[i] = inv[mod % i] * (mod - mod / i) % mod ;
}

for (int i = 2; i <sz; ++i){
    fr[i]=fr[i-1]*i %mod;
    inv[i]=inv[i-1]*inv[i] %mod;
}

**************************************************************************
1~nの逆元を求める(mod m)
vector<ll> list_mod_inverse(ll n, ll m)
{
    vector<ll> inv(n + 1);
    inv[1] = 1;
    for (int i = 2; i <= n; ++i)
        inv[i] = inv[m % i] * (m - m / i) % m;
    return inv;
}
**************************************************************************


ATCODER.standings.pagination.per_page = 10000000
